# This workflow builds and tests a combination of selected
# versions of golang-fips/go, golang-fips/openssl-fips,
# and upstream golang/go on selected container images
# representing a wide variety of openssl versions.
# It is available as either a call or dispatch.

name: "Build and Test Go (FIPS)"

on:
  workflow_dispatch:
    inputs:
      composes:
        description: 'compose names'
        required: true
        default: 'ubi8,ubi9,c8s,c9s'
      go_fips_ref:
        description: 'golang-fips/go ref'
        required: true
        default: 'main'
  workflow_call:
    inputs:
      composes:
        description: 'compose names'
        required: true
        default: 'ubi8,ubi9,c8s,c9s'
        type: string
      go_fips_ref:
        description: 'golang-fips/go ref'
        required: true
        default: 'main'
        type: string

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  actions: none
  checks: read
  contents: none
  deployments: none
  id-token: none
  issues: read
  discussions: read
  packages: none
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  # Print configuration
  print-config:
    name: "Print test configuration"
    runs-on: ubuntu-latest
    steps:
      - name: "Print configuration"
        shell: bash
        run: printf '${{ toJSON(inputs) }}'

  # Look up the images for each selected compose
  select-composes:
    name: "Select Compose Images"
    needs: print-config
    uses: ./.github/workflows/select-composes.yml
    with:
      composes: ${{ inputs.composes }}

  test:
    name: "Build and Test Go (FIPS)"
    runs-on: ubuntu-latest
    needs: select-composes
    strategy:
      fail-fast: false
      matrix:
        compose: ${{fromJson(needs.select-composes.outputs.composes)}}
    container:
      image: ${{ matrix.compose }}
      options: --user root
    steps:
      - name: "Install dependencies"
        shell: bash
        run: yum install git golang golang-bin openssl openssl-devel -y

      - name: "Print OS version"
        shell: bash
        run: cat /etc/os-release

      - name: "Print Go version (host)"
        shell: bash
        run: go version

      - name: "Print Go env"
        shell: bash
        run: go env

      - name: "Print OpenSSL version"
        shell: bash
        run: openssl version

      - name: "Configure golang-fips ci git user"
        shell: bash
        run: | 
          git config --global user.name "golang-fips ci"
          git config --global user.email "<>"

      - name: "Clone golang-fips/go"
        uses: actions/checkout@v3
        with:
          ref: "${{ inputs.go_fips_ref }}"

      - name: "Setup initial fips patches"
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/..
          pwd
          ls -Al *
          if 2>/dev/null cat go/.gitmodules | grep -q "url = https://github.com/golang/go.git"; then
            pushd go
            # init script requires a git repo
            git init
            git config --global --add safe.directory /__w/go/go
            ./scripts/full-initialize-repo.sh
          else
            # set up the directory tree like go*-fips-release
            mkdir go-top
            mv go go-top
            mv go-top go
            pushd go/go
            # build script requires a git repo
            git init
            git config --global --add safe.directory /__w/go/go
            git config --global --add safe.directory /__w/go/go/go
          fi

      - name: "Configure FIPS tests"
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/..
          pwd
          pushd go
          if [[ -f ./scripts/configure-crypto-tests.sh ]]; then
            ./scripts/configure-crypto-tests.sh
          fi

      - name: "Build Go"
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/..
          pwd
          ls -Al *
          pushd go/go/src
          ./make.bash -v

      - name: "Run Go Tests"
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/..
          pwd
          ls -Al *
          pushd go/go/src
          # Skip version dependency check, which will fail due to the
          # module replacement via -require
          ./run.bash -v -v -v -k

      - name: "Run FIPS Tests"
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/..
          pwd
          ls -Al *
          ./go/scripts/crypto-test.sh

